package Principal;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.*;

public class RelojDigital extends javax.swing.JFrame implements Runnable{
    String hora,minutos,segundos,ampm;
    Calendar calendario;
    Thread h1;
    int opcion;
    
  
    public RelojDigital() {
        h1=new Thread(this);
        h1.start();
        InicializarConfiguracion();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonDecimal = new javax.swing.JButton();
        jButtonBinario = new javax.swing.JButton();
        jButtonOctal = new javax.swing.JButton();
        jButtonHexadecimal = new javax.swing.JButton();
        jButtonVigesimal = new javax.swing.JButton();
        LabelReloj = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reloj Digital");

        jButtonDecimal.setText("DECIMAL");
        jButtonDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecimalActionPerformed(evt);
            }
        });

        jButtonBinario.setText("BINARIO");
        jButtonBinario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBinarioActionPerformed(evt);
            }
        });

        jButtonOctal.setText("OCTAL");
        jButtonOctal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOctalActionPerformed(evt);
            }
        });

        jButtonHexadecimal.setText("HEXADECIMAL");
        jButtonHexadecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHexadecimalActionPerformed(evt);
            }
        });

        jButtonVigesimal.setText("VIGESIMAL");
        jButtonVigesimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVigesimalActionPerformed(evt);
            }
        });

        LabelReloj.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        LabelReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonVigesimal, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonHexadecimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonBinario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDecimal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonOctal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addComponent(LabelReloj, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBinario, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonOctal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonHexadecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(LabelReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonVigesimal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecimalActionPerformed
        // TODO add your handling code here: 
        opcion=1;
        impresion(opcion);
    }//GEN-LAST:event_jButtonDecimalActionPerformed

    private void jButtonBinarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBinarioActionPerformed

       opcion=2;
       impresion(opcion);
    }//GEN-LAST:event_jButtonBinarioActionPerformed

    private void jButtonVigesimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVigesimalActionPerformed
        // TODO add your handling code here:
        opcion=5;
        impresion(opcion);
    }//GEN-LAST:event_jButtonVigesimalActionPerformed

    private void jButtonOctalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOctalActionPerformed
        // TODO add your handling code here:
      opcion=3;
      impresion(opcion);
    }//GEN-LAST:event_jButtonOctalActionPerformed

    private void jButtonHexadecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHexadecimalActionPerformed
        // TODO add your handling code here:
        opcion=4;
      impresion(opcion);
    }//GEN-LAST:event_jButtonHexadecimalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelojDigital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelojDigital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelojDigital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelojDigital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new RelojDigital().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel LabelReloj;
    private javax.swing.JButton jButtonBinario;
    private javax.swing.JButton jButtonDecimal;
    private javax.swing.JButton jButtonHexadecimal;
    private javax.swing.JButton jButtonOctal;
    private javax.swing.JButton jButtonVigesimal;
    // End of variables declaration//GEN-END:variables

   public  void InicializarConfiguracion(){
         
       Toolkit tool= Toolkit.getDefaultToolkit();
        Dimension dimensionScreen=tool.getScreenSize();
        dimensionScreen.getHeight();
        dimensionScreen.getWidth();
        int width=800;
        int heigh=240;
        setSize(width, heigh);
        
        setVisible(true);
        setLocation((dimensionScreen.width-width)/2, (dimensionScreen.height-heigh)/2);
         Image icon =tool.getImage("src/Principal/icon.png");
       setIconImage(icon);
    }

    //@Override

    /**
     *
     */
    @Override
    public void run() {
        Thread ct=Thread.currentThread();
        while(ct==h1){     
        calcula();
        impresion(opcion);
        }  
    }
   
    public void impresion(int opcion){
        switch(opcion){
            case 1:
                 LabelReloj.setText(hora+":"+minutos+":"+segundos+" "+ampm);
        
        try{
        Thread.sleep(1000);
        }catch(InterruptedException e){
            
        }
        break;
        
            case 2:
                int horabin=Integer.parseInt(hora);
        int minutosbin=Integer.parseInt(minutos);
        int segundosbin=Integer.parseInt(segundos);
        
        String binhora=Integer.toBinaryString(horabin);
         String binminutos=Integer.toBinaryString(minutosbin);
          String binsegundos=Integer.toBinaryString(segundosbin);
          
      
        LabelReloj.setText(binhora+":"+binminutos+":"+binsegundos+" "+ampm);
        
        try{
        Thread.sleep(1000);
        }catch(InterruptedException e){

        }
                break;
                
            case 3:
                int horaoc=Integer.parseInt(hora);
        int minutosoc=Integer.parseInt(minutos);
        int segundosoc=Integer.parseInt(segundos);
        
        String ochora=Integer.toOctalString(horaoc);
         String ocminutos=Integer.toOctalString(minutosoc);
          String ocsegundos=Integer.toOctalString(segundosoc);
        LabelReloj.setText(ochora+":"+ocminutos+":"+ocsegundos+" "+ampm);
        try{
        Thread.sleep(1000);
        }catch(InterruptedException e){}
                break;
                
            case 4:
                 int horahex=Integer.parseInt(hora);
        int minutoshex=Integer.parseInt(minutos);
        int segundoshex=Integer.parseInt(segundos);
        
        String hexhora=Integer.toHexString(horahex);
         String hexminutos=Integer.toHexString(minutoshex);
          String hexsegundos=Integer.toHexString(segundoshex);
        LabelReloj.setText(hexhora+":"+hexminutos+":"+hexsegundos+" "+ampm);
        try{
        Thread.sleep(1000);
        }catch(InterruptedException e){}
                break;
                
            case 5:
                Vigesimal(hora,minutos,segundos,ampm);
          
        try{
        Thread.sleep(1000);
        }catch(InterruptedException e){}
                break;
        }
    
    }
    
    public void calcula(){
        Calendar calendario=new GregorianCalendar();
        Date HoraActual=new Date();
        
        calendario.setTime(HoraActual);
        ampm= calendario.get(Calendar.AM_PM)==Calendar.AM?"AM":"PM";
        
        if(ampm.equals("PM")){
        int h=calendario.get(Calendar.HOUR_OF_DAY);
        hora =h>9?""+h:"0"+h;      
        }else{
        hora=calendario.get(Calendar.HOUR_OF_DAY)>9?""+calendario.get(Calendar.HOUR_OF_DAY):"0"+calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos=calendario.get(Calendar.MINUTE)>9?""+calendario.get(Calendar.MINUTE):"0"+calendario.get(Calendar.MINUTE);
        segundos=calendario.get(Calendar.SECOND)>9?""+calendario.get(Calendar.SECOND):"0"+calendario.get(Calendar.SECOND);
    }
    
    public void Vigesimal(String hora, String minutos, String segundos,String ampm){
             int horavig=Integer.parseInt(hora);
             int resto=0; 
             String Vigesimalhora=""; 
             String Vigesimalmin=""; 
             String Vigesimalseg=""; 
        
        int minutosVig=Integer.parseInt(minutos);
        int segundosVig=Integer.parseInt(segundos);
        
       
     try { 
        while(horavig>0) 
        { 
           
           resto=(horavig%20); 
           if(resto>9) 
               Vigesimalhora=letras(resto)+Vigesimalhora; 
           else 
               Vigesimalhora=resto+Vigesimalhora; 
            horavig=horavig/20; 
        } 
            
        while(minutosVig>0) 
        { 
           
           resto=(minutosVig%20); 
           if(resto>9) 
               Vigesimalmin=letras(resto)+Vigesimalmin; 
           else 
               Vigesimalmin=resto+Vigesimalmin; 
            minutosVig=minutosVig/20; 
        } 
         
         while(segundosVig>0) 
        { 
           
           resto=(segundosVig%20); 
           if(resto>9) 
               Vigesimalseg=letras(resto)+Vigesimalseg; 
           else 
               Vigesimalseg=resto+Vigesimalseg; 
            segundosVig=segundosVig/20; 
        } 
     }
        catch(Exception e) {
                
        } 
     LabelReloj.setText(Vigesimalhora+":"+Vigesimalmin+":"+Vigesimalseg+" "+ampm);
     
    }
    
         static String letras(int n){ 
        String letra=""; 
        switch(n) 
        { 
        case 10: 
        letra="A"; 
        break; 
        case 11: 
        letra="B"; 
        break; 
        case 12: 
        letra="C"; 
        break; 
        case 13: 
        letra="D"; 
        break; 
        case 14: 
        letra="E"; 
        break; 
        case 15: 
        letra="F"; 
        break; 
        
         case 16: 
        letra="G"; 
        break; 
        
         case 17: 
        letra="H"; 
        break;
        
         case 18: 
        letra="I"; 
        break; 
        
         case 19: 
        letra="J"; 
        break; 
        } 
        return letra; 
    } 
       
       
        
                
                
    }
    
  



